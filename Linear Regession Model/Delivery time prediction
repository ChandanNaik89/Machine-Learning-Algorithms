#Question 2

#Read a csv file :
del_time<-read.csv("C:\\Users\\admin\\Desktop\\python program files\\Assignment 3\\delivery_time.csv")
#del_time <- read.csv(file.choose())
View(del_time)
summary(del_time)

#Normality Check:
#Calculate Mean and median
mean(del_time$Delivery.Time)       #16.790
median(del_time$Delivery.Time)     #17.83
 
mean(del_time$Sorting.Time)        #6.190
median(del_time$Sorting.Time)      #6

#Graphical Representation

#QQ Plot :

qqnorm(del_time$Delivery.Time)
qqline(del_time$Delivery.Time)

qqnorm(del_time$Sorting.Time)
qqline(del_time$Sorting.Time)

#Histogram :
hist(del_time$Delivery.Time)

hist(del_time$Sorting.Time)

#Boxplot:
A<-boxplot(del_time$Delivery.Time)
B<-boxplot(del_time$Sorting.Time)

#Check if there is any outliers
A$out   #No
B$out   #No

#Data doesn't follows normal distribution

#Transformation of data :
#A<-sqrt(del_time$Delivery.Time)
#A<-log(del_time$Delivery.Time)
#mean(A)       #2.77
#median(A)     #2.88
#boxplot(A)
#qqnorm(A)
#qqline(A)

#Transformation doesn't make much difference so no need of Transformation.

attach(del_time)

#Scatter Plot


plot(Sorting.Time,Delivery.Time,main="Scatter Plot", col="Dodgerblue4", 
     col.main="Dodgerblue4", col.lab="Dodgerblue4", 
     xlab="Sorting Time", 
     ylab="Delivery Time", pch=20)

#plot(Sorting.Time,Delivery.Time)

#Model Building

#Model 1:

delivery_time <-lm(Delivery.Time~Sorting.Time,data=del_time)
summary(delivery_time)

#Pvalue is less than 0.05, Intercept=6.5827,Slope=1.6490
#Adjusted R Squared Value 0.6655 ..... Moderate



cor(Sorting.Time,Delivery.Time)    #0.82599  --- cor>0.85, Moderate

delivery_time$coefficients    
delivery_time$residuals

#RMSE 
sqrt(sum(delivery_time$residuals^2)/nrow(del_time))   #2.79165

#Confint and Prediction Check:

confint(delivery_time,level=0.95)
predict1<-predict(delivery_time,interval="predict")
View(predict1)




# Model 2 for checking better R Squared Value :

delivery_time1 <-lm(Delivery.Time~sqrt(Sorting.Time),data=del_time)
summary(delivery_time1)

#Pvalue is less than 0.05, Intercept=-2.518837 ,Slope=7.936591 
#Adjusted R Squared Value 0.6798 ..... Moderate

cor(Sorting.Time,sqrt(Delivery.Time))    #0.8390  --- cor>0.85, Moderate

delivery_time1$coefficients    
delivery_time1$residuals

#RMSE 
sqrt(sum(delivery_time1$residuals^2)/nrow(del_time))   #2.731543 

#Confint and Prediction Check:

confint(delivery_time1,level=0.95)
predict2<-predict(delivery_time1,interval="predict")
View(predict2)

# Model 3 for checking better R Squared Value :

delivery_time2 <-lm(log(Delivery.Time)~Sorting.Time,data=del_time)
summary(delivery_time2)

#Pvalue is less than 0.05, Intercept=2.12137 ,Slope=0.10555 
#Multiple R-squared:  0.7109,	Adjusted R-squared:  0.6957 ... Moderate

cor(log(Delivery.Time),Sorting.Time)   #0.8431

delivery_time2$coefficients    
delivery_time2$residuals

#RMSE 
sqrt(sum(delivery_time2$residuals^2)/nrow(del_time))   #0.166 

 # Model 3 for checking better R Squared Value :

delivery_time3<-lm(log(Delivery.Time)~Sorting.Time+I(Sorting.Time*Sorting.Time),data=del_time)
summary(delivery_time3)


#Pvalue is less than 0.05, Intercept=1.699 ,Slope=0.265 
#Multiple R-squared:  0.7649,	Adjusted R-squared:  0.7387 ... Moderate

cor(log(Delivery.Time),(Sorting.Time*Sorting.Time))   #0.788

delivery_time3$coefficients    
delivery_time3$residuals

#RMSE 
sqrt(sum(delivery_time3$residuals^2)/nrow(del_time))   #0.166 

#Prediction :

pred_delivery<-predict(delivery_time3,interval="predict")


#Result : Model 3 is having better correlation, R squared value and less RMSE.
#Model 3 is best fit for predicting Delivery Time
